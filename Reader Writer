#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex, writeBlock;
int data = 0;
int readCount = 0;

void* reader(void* arg) {
    int f = *((int*)arg);

    sem_wait(&mutex);        
    readCount++;
    if (readCount == 1)
        sem_wait(&writeBlock); 
    sem_post(&mutex);        

    printf("Reader %d is reading data = %d\n", f, data);
    sleep(1);

    sem_wait(&mutex);
    readCount--;
    if (readCount == 0)
        sem_post(&writeBlock); 
    sem_post(&mutex);

    pthread_exit(NULL);
}

void* writer(void* arg) {
    int f = *((int*)arg);

    sem_wait(&writeBlock);     
    data += 10;
    printf("Writer %d is writing data = %d\n", f, data);
    sleep(1);
    sem_post(&writeBlock);     

    pthread_exit(NULL);
}

int main() {
    pthread_t rtid[5], wtid[5];
    int i;
    
    sem_init(&mutex, 0, 1);
    sem_init(&writeBlock, 0, 1);

    for (i = 0; i < 5; i++) {
        int* id = malloc(sizeof(int));
        *id = i + 1;
        pthread_create(&rtid[i], NULL, reader, id);
        pthread_create(&wtid[i], NULL, writer, id);
    }

    for (i = 0; i < 5; i++) {
        pthread_join(rtid[i], NULL);
        pthread_join(wtid[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&writeBlock);

    return 0;
}
